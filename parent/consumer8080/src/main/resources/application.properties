spring.application.name=depart-comsumer

spring.cloud.nacos.discovery.server-addr=localhost:8848
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos

# consumer连接上provider的时间阈值
spring.cloud.openfeign.client.config.default.connect-timeout=3000
# consumer发出请求到接收到响应的时间阈值
spring.cloud.openfeign.client.config.default.read-timeout=3000
# 上面是全局配置 下面是针对不同feign的配置
spring.cloud.openfeign.client.config.depart-provider.connect-timeout=3000
spring.cloud.openfeign.client.config.depart-provider.read-timeout=6000
#================================================================#
# 是否对请求数据进行压缩
spring.cloud.openfeign.compression.request.enabled=true
# 压缩的请求格式
spring.cloud.openfeign.compression.request.mime-types=["text/html", "application/xml", "application/json", "video/mp4"]
# 最小的请求大小 超过这个值才进行压缩
spring.cloud.openfeign.compression.request.min-request-size=1024
# 与上述同理
spring.cloud.openfeign.compression.response.enabled=true
#=================================================================
# 采用httpClient5的实现,单例模式下性能更好
spring.cloud.openfeign.httpclient.hc5.enabled=true
# 采用OkHttp的实现,非单例模式下性能更好
# spring.cloud.openfeign.okhttp.enabled=true

#=============gateway配置============================
spring.cloud.gateway.routes[0].id=jd_route
spring.cloud.gateway.routes[0].uri=https://jd.com
spring.cloud.gateway.routes[0].predicates[0]=Path=/jd

spring.cloud.gateway.routes[1].id=tb_route
spring.cloud.gateway.routes[1].uri=https://taobao.com
# spring.cloud.gateway.routes[1].predicates[0]=Path=/tb
# 下面的配置表示在某个时间之后。正确的格式应该是 "YYYY-MM-DDTHH:MM:SS.SSSZ" 其中Z表示的是UTC时间。
# spring.cloud.gateway.routes[1].predicates[0]=After=2021-12-27T21:30:00.789-07:00
# 下面的配置表示cookie匹配到放行到uri
# spring.cloud.gateway.routes[1].predicates[0]=Cookie=city, beijing
# 下面的配置指定header匹配,多个header是并且的关系,需要都满足。示例中header中的key为X-Request-Id,value则是正则表达式代表所有实数
# spring.cloud.gateway.routes[1].predicates[0]=Header=X-Request-Id,\\d+
# 下面的配置是指定host匹配,注意需要带上端口号
# spring.cloud.gateway.routes[1].predicates[0]=Host=aaa.com:8080,bbb.com:8080
# 下面的配置指定请求提交方式匹配method
# spring.cloud.gateway.routes[1].predicates[0]=Method=GET,POST
# 下面的配置指定请求参数匹配断言 kv键值对形式
# spring.cloud.gateway.routes[1].predicates[0]=Query=color,gr.+
# 下面的配置指定权重匹配断言   类似于百分比概率
# spring.cloud.gateway.routes[1].predicates[0]=Weight=ecommerce,8
# 下面是自定义断言
spring.cloud.gateway.routes[1].predicates[0]=Auth=zhangsan,123


spring.cloud.gateway.routes[2].id=my_route
spring.cloud.gateway.routes[2].uri=https://baidu.com
# spring.cloud.gateway.routes[2].predicates[0]=Path=/bd
# spring.cloud.gateway.routes[2].predicates[0]=Weight=ecommerce,2
spring.cloud.gateway.routes[2].predicates[0]=Token=123
## 配置式的断言和API式的断言哪个优先级最高? ------- 两者是或的关系[Header,Query]，有时是配置式更高[After,Before,Between]
